{"version":3,"file":"form_builder.js","sourceRoot":"","sources":["../../../../../packages/forms/src/form_builder.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAGzC,OAAO,EAAkB,SAAS,EAAE,WAAW,EAAE,SAAS,EAAC,MAAM,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;IAwBzE;;;;;OAKG;;;;;;;;;;IACH,2BAAK;;;;;;;;;IAAL,UAAM,cAAoC,EAAE,KAAuC;QAAvC,sBAAA,EAAA,YAAuC;QACjF,qBAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QACtD,qBAAM,SAAS,GAAgB,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACzE,qBAAM,cAAc,GAAqB,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACxF,MAAM,CAAC,IAAI,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;KAC3D;IACD;;;;;;;OAOG;;;;;;;;;;;;;IACH,6BAAO;;;;;;;;;;;;IAAP,UACI,SAAc,EAAE,SAA0C,EAC1D,cAAyD;QAC3D,MAAM,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;KAC9D;IAED;;;OAGG;;;;;;;;;IACH,2BAAK;;;;;;;;IAAL,UACI,cAAqB,EAAE,SAA0C,EACjE,cAAyD;QAF7D,iBAKC;QAFC,qBAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACjE,MAAM,CAAC,IAAI,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;KAC3D;IAED,gBAAgB;;;;;;IAChB,qCAAe;;;;;IAAf,UAAgB,cAAkC;QAAlD,iBAMC;QALC,qBAAM,QAAQ,GAAqC,EAAE,CAAC;QACtD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,UAAA,WAAW;YAC7C,QAAQ,CAAC,WAAW,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;SAC1E,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC;KACjB;IAED,gBAAgB;;;;;;IAChB,oCAAc;;;;;IAAd,UAAe,aAAkB;QAC/B,EAAE,CAAC,CAAC,aAAa,YAAY,WAAW,IAAI,aAAa,YAAY,SAAS;YAC1E,aAAa,YAAY,SAAS,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,aAAa,CAAC;SAEtB;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACxC,qBAAM,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAC/B,qBAAM,SAAS,GAAgB,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAClF,qBAAM,cAAc,GAAqB,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC5F,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;SAEvD;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SACpC;KACF;;gBA/DF,UAAU;;;;sBAjCX;;SAkCa,WAAW","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n\n/**\n * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * @howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `@angular/forms`\n *\n *  * **NgModule**: {@link ReactiveFormsModule}\n *\n * @stable\n */\n@Injectable()\nexport class FormBuilder {\n  /**\n   * Construct a new {@link FormGroup} with the given map of configuration.\n   * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n   *\n   * See the {@link FormGroup} constructor for more details.\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any}|null = null): FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n    const validator: ValidatorFn = extra != null ? extra['validator'] : null;\n    const asyncValidator: AsyncValidatorFn = extra != null ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n  /**\n   * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n   * `asyncValidator`.\n   *\n   * `formState` can either be a standalone value for the form control or an object\n   * that contains both a value and a disabled status.\n   *\n   */\n  control(\n      formState: any, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n\n  /**\n   * Construct a {@link FormArray} from the given `controlsConfig` array of\n   * configuration, with the given optional `validator` and `asyncValidator`.\n   */\n  array(\n      controlsConfig: any[], validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n}\n"]}