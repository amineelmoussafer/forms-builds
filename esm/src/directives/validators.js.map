{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../../modules/@angular/forms/src/directives/validators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {isPresent} from '../facade/lang';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): {[key: string]: any};\n  registerOnChange?(fn: () => void): void;\n}\n\nexport const REQUIRED_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\nexport class RequiredValidator implements Validator {\n  private _required: boolean;\n  private _onChange: () => void;\n  get required(): boolean { return this._required; }\n\n  set required(value: boolean) {\n    this._required = isPresent(value) && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.required ? Validators.required(c) : null;\n  }\n\n  registerOnChange(fn: () => void) { this._onChange = fn; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n};\n}\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): {[key: string]: any}; }\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): any /*Promise<{[key: string]: any}>|Observable<{[key: string]: any}>*/;\n}\n\n/**\n * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\nexport class MinLengthValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void; minlength: string;\n\n  private _createValidator() {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['minlength']) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return isPresent(this.minlength) ? this._validator(c) : null;\n  }\n\n  registerOnChange(fn: () => void) { this._onChange = fn; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength? minlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minlength': [{ type: Input },],\n};\n}\n\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void; maxlength: string;\n\n  private _createValidator() {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['maxlength']) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return isPresent(this.maxlength) ? this._validator(c) : null;\n  }\n\n  registerOnChange(fn: () => void) { this._onChange = fn; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength? maxlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxlength': [{ type: Input },],\n};\n}\n\n\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\nexport class PatternValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void; pattern: string;\n\n  private _createValidator() { this._validator = Validators.pattern(this.pattern); }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['pattern']) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return isPresent(this.pattern) ? this._validator(c) : null;\n  }\n\n  registerOnChange(fn: () => void) { this._onChange = fn; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern? pattern : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pattern': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}