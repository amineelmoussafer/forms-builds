{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/number_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAU,UAAA,EAAY,QAAA,EAAU,UAAA,EAAW,MAAA,eAAA,CAAA;AAEpD,OAAO,EAAuB,iBAAA,EAAkB,MAAA,0BAAA,CAAA;AAEhD,MAAM,CAAC,IAAA,gBAAA,CAAM,qBAAA,GAA6B;IACxC,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,cAAM,OAAA,mBAAA,EAAA,CAAA,CAAoB;IAClD,KAAK,EAAE,IAAA;CACR,CAAC;AACF;;;;;;;;GAQG;AACH;IAGA;;;OAGG;IACH,6BADsB,SAAW,EAAkB,WAAa;QAA1C,cAAA,GAAA,SAAA,CAAW;QAAkB,gBAAA,GAAA,WAAA,CAAa;QAL9D,aAAQ,GAEG,UAAA,CAAI,IAAQ,CAAA,CAAG;QAD1B,cAAS,GAEG,cAAM,CAAA,CAAG;IAEoD,CAAA;IAG3E;;;OAGG;IACH,wCALG,GAKH,UALG,KAAA;QAMC,oFAAoF;QACpF,IAAM,gBAAgB,CALhB,eAAA,GAAkB,KAAA,IAAS,IAAA,GAAO,EAAA,GAAK,KAAA,CAAM;QAMnD,IAAI,CALC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,OAAA,EAAS,eAAA,CAAgB,CAAC;IAM9F,CAAC;IACH;;;OAGG;IACH,8CARG,GAQH,UARG,EAAA;QASC,IAAI,CARC,QAAC,GAAU,UAAA,KAAE,IAAW,EAAA,CAAG,KAAC,IAAQ,EAAA,GAAK,IAAA,GAAO,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC,CAAC,CAAA,CAAE;IAS7E,CAAC;IACH;;;OAGG;IACH,+CAZG,GAYH,UAZG,EAAA,IAAyC,IAAA,CAAK,SAAC,GAAW,EAAA,CAAG,CAAC,CAAA;IAajE;;;OAGG;IACH,8CAfG,GAeH,UAfG,UAAA;QAgBC,IAAI,CAfC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,UAAA,EAAY,UAAA,CAAW,CAAC;IAgB5F,CAAC;IAkBH,0BAAC;AAAD,CAtDA,AAsDC;;AAhCM,8BAAA,GAAoC;IAgB3C,EAfE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAQvB,QAAA,EASI,iGAAiG;gBACrG,IAAI,EAfE;oBAgBJ,UAAU,EAfE,+BAAA;oBAgBZ,SAAS,EAfE,+BAAA;oBAgBX,QAAQ,EAfE,aAAA;iBAgBX;gBACD,SAAS,EAfE,CAAA,qBAAE,CAAqB;aAgBnC,EAfC,EAAG;CAgBJ,CAfC;AAgBF,kBAAkB;AAdX,kCAAA,GAAiF,cAAM,OAAA;IAgB9F,EAAC,IAfC,EAAK,QAAA,GAAS;IAgBhB,EAAC,IAfC,EAAK,UAAA,GAAW;CAgBjB,EAlB6F,CAkB7F,CAfC;AAkBF;IACA,gBAAgB;IAChB,mBAAmB,CAAC,UAAU,CAAC;IAC/B;;;OAGG;IACH,mBAAmB,CAAC,cAAc,CAAC;IACnC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACvC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;AAC1C,CAAC","file":"number_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\nfunction NumberValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nNumberValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNumberValueAccessor.ctorParameters;\n/** @type {?} */\nNumberValueAccessor.prototype.onChange;\n/** @type {?} */\nNumberValueAccessor.prototype.onTouched;\n/** @type {?} */\nNumberValueAccessor.prototype._renderer;\n/** @type {?} */\nNumberValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}