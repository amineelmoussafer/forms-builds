{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/checkbox_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAU,UAAA,EAAY,QAAA,EAAU,UAAA,EAAW,MAAA,qBAAA,CAAA;AAEpD,OAAO,EAAuB,iBAAA,EAAkB,MAAA,0BAAA,CAAA;AAEhD,MAAM,CAAC,MAAA,gBAAA,CAAM,uBAAA,GAA+B;IAC1C,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,MAAM,4BAAA,CAA6B;IAC3D,KAAK,EAAE,IAAA;CACR,CAAC;AACF;;;;;;;;;GASG;AACH,MAEC;IACD;;;OAGG;IACH,YADsB,SAAW,EAAkB,WAAa;QAA1C,cAAA,GAAA,SAAA,CAAW;QAAkB,gBAAA,GAAA,WAAA,CAAa;QAL9D,aAAQ,GAEG,CAAA,CAAI,OAAQ,CAAA,CAAG;QAD1B,cAAS,GAEG,QAAM,CAAA,CAAG;IAEoD,CAAA;IAG3E;;;OAGG;IACH,UALG,CAAA,KAAA;QAMC,IAAI,CALC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,SAAA,EAAW,KAAA,CAAM,CAAC;IAMtF,CAAC;IACH;;;OAGG;IACH,gBATG,CAAA,EAAA,IAA4C,IAAA,CAAK,QAAC,GAAU,EAAA,CAAG,CAAC,CAAA;IAUnE;;;OAGG;IACH,iBAbG,CAAA,EAAA,IAAuC,IAAA,CAAK,SAAC,GAAW,EAAA,CAAG,CAAC,CAAA;IAc/D;;;OAGG;IACH,gBAhBG,CAAA,UAAA;QAiBC,IAAI,CAhBC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,UAAA,EAAY,UAAA,CAAW,CAAC;IAiB5F,CAAC;;AAfI,uCAAA,GAAoC;IAiB3C,EAhBE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAiBvB,QAAQ,EACJ,uGAAuG;gBAC3G,IAAI,EAhBE,EAAA,UAAE,EAAW,iCAAA,EAAmC,QAAA,EAAU,aAAA,EAAc;gBAiB9E,SAAS,EAhBE,CAAA,uBAAE,CAAuB;aAiBrC,EAhBC,EAAG;CAiBJ,CAhBC;AAiBF,kBAAkB;AAfX,2CAAA,GAAiF,MAAM;IAiB9F,EAAC,IAhBC,EAAK,QAAA,GAAS;IAiBhB,EAAC,IAhBC,EAAK,UAAA,GAAW;CAiBjB,CAhBC;AAmBF;IACA,gBAAgB;IAChB,4BAA4B,CAAC,UAAU,CAAC;IACxC;;;OAGG;IACH,4BAA4B,CAAC,cAAc,CAAC;IAC5C,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,QAAQ,CAAC;IAChD,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,SAAS,CAAC;IACjD,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,SAAS,CAAC;IACjD,gBAAgB;IAChB,4BAA4B,CAAC,SAAS,CAAC,WAAW,CAAC;AACnD,CAAC","file":"checkbox_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer, forwardRef} from '@angular/core/index';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n * \n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n * \n *  \\@stable\n */\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\nfunction CheckboxControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxControlValueAccessor.ctorParameters;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype.onChange;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype._renderer;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}