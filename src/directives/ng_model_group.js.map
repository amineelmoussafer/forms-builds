{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/ng_model_group.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,SAAE,EAAU,IAAA,EAAM,MAAA,EAAQ,KAAA,EAA0B,QAAA,EAAU,IAAA,EAAM,QAAA,EAAU,UAAA,EAAW,MAAA,qBAAA,CAAA;AAEhG,OAAO,EAAA,mBAAE,EAAoB,aAAA,EAAc,MAAA,eAAA,CAAA;AAE3C,OAAO,EAAA,0BAAE,EAA0B,MAAA,iCAAA,CAAA;AACnC,OAAO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AACzB,OAAO,EAAA,MAAE,EAAM,MAAA,WAAA,CAAA;AACf,OAAO,EAAA,oBAAE,EAAoB,MAAA,0BAAA,CAAA;AAE7B,MAAM,CAAC,MAAA,gBAAA,CAAM,kBAAA,GAA0B;IACrC,OAAO,EAAE,gBAAA;IACT,WAAW,EAAE,UAAA,CAAW,MAAM,YAAA,CAAa;CAC5C,CAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAEC,mBAAA,SAAA,0BAAA;IAAD;;;;OAIG;IACH,YACQ,MAFQ,EAGP,UAFgB,EAGhB,eAFqB;QAG1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC1C,CAAC;IACH;;;OAGG;IACH,gBAJG;QAKC,EAAE,CAAC,CAAC,CAJC,CAAC,IAAC,CAAI,OAAC,YAAkB,YAAA,CAAa,IAAI,CAAA,CAAE,IAAC,CAAI,OAAC,YAAkB,MAAA,CAAO,CAAC,CAAC,CAAA;YAKhF,oBAAoB,CAJC,yBAAC,EAAyB,CAAE;QAKnD,CAAC;IACH,CAAC;;AAHI,uBAAA,GAAoC;IAK3C,EAJE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,EAAE,QAAC,EAAS,gBAAA,EAAkB,SAAA,EAAW,CAAA,kBAAE,CAAkB,EAAE,QAAA,EAAU,cAAA,EAAe,EAAC,EAAG;CAKpH,CAJC;AAKF,kBAAkB;AAHX,2BAAA,GAAiF,MAAM;IAK9F,EAAC,IAJC,EAAK,gBAAA,EAAkB,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,IAAA,EAAK,EAAG,EAAE,IAAA,EAAM,QAAA,EAAS,EAAE,EAAG;IAK5E,EAAC,IAJC,EAAK,KAAA,EAAO,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,QAAA,EAAS,EAAG,EAAE,IAAA,EAAM,IAAA,EAAK,EAAG,EAAE,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,aAAE,EAAa,EAAG,EAAE,EAAG;IAK5G,EAAC,IAJC,EAAK,KAAA,EAAO,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,QAAA,EAAS,EAAG,EAAE,IAAA,EAAM,IAAA,EAAK,EAAG,EAAE,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,mBAAE,EAAmB,EAAG,EAAE,EAAG;CAKjH,CAJC;AACK,2BAAA,GAAyD;IAKhE,MAAM,EAJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,cAAE,EAAc,EAAG,EAAE;CAKlD,CAJC;AAOF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;AAC5B,CAAC","file":"ng_model_group.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core/index';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\nexport const /** @type {?} */ modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n * \n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n * \n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n * \n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n * \\@stable\n */\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n        parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['ngModelGroup', ] },],\n};\n}\n\nfunction NgModelGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModelGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModelGroup.ctorParameters;\n/** @type {?} */\nNgModelGroup.propDecorators;\n/** @type {?} */\nNgModelGroup.prototype.name;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}