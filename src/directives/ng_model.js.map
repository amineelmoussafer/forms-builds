{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/ng_model.ts"],"names":[],"mappings":"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","file":"ng_model.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, HostListener, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../facade/async';\nimport {FormControl} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst /** @type {?} */ resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n * \n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n * \n * \\@howToUse \n * \n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n * \n * It accepts a domain model as an optional {\\@link \\@Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n * \n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n * \n * The following is an example of a simple standalone control using `ngModel`:\n * \n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n * \n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n * \n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n * \n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n * \n * Take a look at an example of using `ngModel` within a form:\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * To see `ngModel` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n  /** @internal */\n  _control = new FormControl();\n  /** @internal */\n  _registered = false;\nprivate _composing = false;\n  viewModel: any;\n\n   name: string;\n   isDisabled: boolean;\n   model: any;\n   options: {name?: string, standalone?: boolean};\n\n   update = new EventEmitter();\n/**\n * @return {?}\n */\ncompositionStart(): void { this._composing = true; }\n/**\n * @return {?}\n */\ncompositionEnd(): void {\n    this._composing = false;\n    this.update.emit(this.viewModel);\n  }\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(  parent: ControlContainer,\n                 validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nget path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                !this._composing && this.update.emit(newValue);\n              }\n/**\n * @return {?}\n */\nprivate _setUpControl(): void {\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n/**\n * @return {?}\n */\nprivate _isStandalone(): boolean {\n                return !this._parent || (this.options && this.options.standalone);\n              }\n/**\n * @return {?}\n */\nprivate _setUpStandalone(): void {\n                setUpControl(this._control, this);\n                this._control.updateValueAndValidity({emitEvent: false});\n              }\n/**\n * @return {?}\n */\nprivate _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n/**\n * @return {?}\n */\nprivate _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _updateDisabled(changes: SimpleChanges) {\n                const /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\n                const /** @type {?} */ isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'options': [{ type: Input, args: ['ngModelOptions', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'compositionStart': [{ type: HostListener, args: ['compositionstart', ] },],\n'compositionEnd': [{ type: HostListener, args: ['compositionend', ] },],\n};\n}\n\nfunction NgModel_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModel.ctorParameters;\n/** @type {?} */\nNgModel.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._registered;\n/** @type {?} */\nNgModel.prototype._composing;\n/** @type {?} */\nNgModel.prototype.viewModel;\n/** @type {?} */\nNgModel.prototype.name;\n/** @type {?} */\nNgModel.prototype.isDisabled;\n/** @type {?} */\nNgModel.prototype.model;\n/** @type {?} */\nNgModel.prototype.options;\n/** @type {?} */\nNgModel.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}