{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/validators.ts"],"names":[],"mappings":"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","file":"validators.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, Input, OnChanges, Provider, SimpleChanges, forwardRef} from '@angular/core';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): {[key: string]: any};\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\nexport const /** @type {?} */ REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n * \n * \\@stable\n */\nexport class RequiredValidator implements Validator {\nprivate _required: boolean;\nprivate _onChange: () => void;\n/**\n * @return {?}\n */\nget required(): boolean /*| string*/ { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.required ? Validators.required(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n};\n}\n\nfunction RequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRequiredValidator.ctorParameters;\n/** @type {?} */\nRequiredValidator.propDecorators;\n/** @type {?} */\nRequiredValidator.prototype._required;\n/** @type {?} */\nRequiredValidator.prototype._onChange;\n}\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n * \n * \\@experimental\n */\nexport class CheckboxRequiredValidator extends RequiredValidator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.required ? Validators.requiredTrue(c) : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxRequiredValidator.ctorParameters;\n}\n\n\n/**\n * Provider which adds {@link EmailValidator} to {@link NG_VALIDATORS}.\n */\nexport const /** @type {?} */ EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n * \n * \\@experimental\n */\nexport class EmailValidator implements Validator {\nprivate _enabled: boolean;\nprivate _onChange: () => void;\n/**\n * @param {?} value\n * @return {?}\n */\nset email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this._enabled ? Validators.email(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'email': [{ type: Input },],\n};\n}\n\nfunction EmailValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEmailValidator.ctorParameters;\n/** @type {?} */\nEmailValidator.propDecorators;\n/** @type {?} */\nEmailValidator.prototype._enabled;\n/** @type {?} */\nEmailValidator.prototype._onChange;\n}\n\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): {[key: string]: any}; }\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): any /*Promise<{[key: string]: any}>|Observable<{[key: string]: any}>*/;\n}\n\n/**\n * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const /** @type {?} */ MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n * \n * \\@stable\n */\nexport class MinLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   minlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.minlength == null ? null : this._validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minlength': [{ type: Input },],\n};\n}\n\nfunction MinLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMinLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMinLengthValidator.ctorParameters;\n/** @type {?} */\nMinLengthValidator.propDecorators;\n/** @type {?} */\nMinLengthValidator.prototype._validator;\n/** @type {?} */\nMinLengthValidator.prototype._onChange;\n/** @type {?} */\nMinLengthValidator.prototype.minlength;\n}\n\n\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const /** @type {?} */ MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n * \n * \\@stable\n */\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   maxlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} {\n    return this.maxlength != null ? this._validator(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxlength': [{ type: Input },],\n};\n}\n\nfunction MaxLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMaxLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaxLengthValidator.ctorParameters;\n/** @type {?} */\nMaxLengthValidator.propDecorators;\n/** @type {?} */\nMaxLengthValidator.prototype._validator;\n/** @type {?} */\nMaxLengthValidator.prototype._onChange;\n/** @type {?} */\nMaxLengthValidator.prototype.maxlength;\n}\n\n\n\nexport const /** @type {?} */ PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n * \n * ### Example\n * \n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nexport class PatternValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   pattern: string /*|RegExp*/;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pattern': [{ type: Input },],\n};\n}\n\nfunction PatternValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nPatternValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPatternValidator.ctorParameters;\n/** @type {?} */\nPatternValidator.propDecorators;\n/** @type {?} */\nPatternValidator.prototype._validator;\n/** @type {?} */\nPatternValidator.prototype._onChange;\n/** @type {?} */\nPatternValidator.prototype.pattern;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}