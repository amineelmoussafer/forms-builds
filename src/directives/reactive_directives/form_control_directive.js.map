{"version":3,"sources":["../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_control_directive.ts"],"names":[],"mappings":"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","file":"form_control_directive.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core/index';\n\nimport {EventEmitter} from '../../facade/async';\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n * \n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n * \n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n * {\\@link AbstractControl.patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n *  \\@stable\n */\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n   form: FormControl;\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(   validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<Validator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @return {?}\n */\nget control(): FormControl { return this.form; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formControl', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlDirective.ctorParameters;\n/** @type {?} */\nFormControlDirective.propDecorators;\n/** @type {?} */\nFormControlDirective.prototype.viewModel;\n/** @type {?} */\nFormControlDirective.prototype.form;\n/** @type {?} */\nFormControlDirective.prototype.model;\n/** @type {?} */\nFormControlDirective.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}