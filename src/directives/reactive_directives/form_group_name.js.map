{"version":3,"sources":["../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_group_name.ts"],"names":[],"mappings":"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","file":"form_group_name.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const /** @type {?} */ formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n * \n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n * \n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formGroupName]', providers: [formGroupNameProvider]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formGroupName', ] },],\n};\n}\n\nfunction FormGroupName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroupName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormGroupName.ctorParameters;\n/** @type {?} */\nFormGroupName.propDecorators;\n/** @type {?} */\nFormGroupName.prototype.name;\n}\n\n\nexport const /** @type {?} */ formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n * \n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl.get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}\n * methods.\n * \n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl.valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl.statusChanges} event to be notified when the validation\n * status is re-calculated.\n * \n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray.push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._checkParentType();\n    this.formDirective.addFormArray(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n/**\n * @return {?}\n */\nget control(): FormArray { return this.formDirective.getFormArray(this); }\n/**\n * @return {?}\n */\nget formDirective(): FormGroupDirective {\n    return this._parent ? /** @type {?} */(( <FormGroupDirective>this._parent.formDirective)) : null;\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn { return composeValidators(this._validators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn { return composeAsyncValidators(this._asyncValidators); }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formArrayName]', providers: [formArrayNameProvider]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formArrayName', ] },],\n};\n}\n\nfunction FormArrayName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArrayName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormArrayName.ctorParameters;\n/** @type {?} */\nFormArrayName.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._parent;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._validators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._asyncValidators;\n/** @type {?} */\nFormArrayName.prototype.name;\n}\n\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}