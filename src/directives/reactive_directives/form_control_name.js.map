{"version":3,"sources":["../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_control_name.ts"],"names":[],"mappings":"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","file":"form_control_name.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core/index';\n\nimport {EventEmitter} from '../../facade/async';\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const /** @type {?} */ controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n * \n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl.get} method.\n * Ex: `this.form.get('first');`\n * \n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n * \n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl.setValue} or {\\@link AbstractControl.patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * In this example, we create form controls for first name and last name.\n * \n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n * \n * To see `formControlName` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: {\\@link ReactiveFormsModule}\n * \n *  \\@stable\n */\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\nprivate _added = false;\n  /** @internal */\n  viewModel: any;\n  /** @internal */\n  _control: FormControl;\n\n   name: string;\n\n  // TODO(kara):  Replace ngModel with reactive API\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(\n         parent: ControlContainer,\n         validators: Array<Validator|ValidatorFn>,\n         asyncValidators:\n          Array<Validator|AsyncValidatorFn>,\n         valueAccessors: ControlValueAccessor[]) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n    return composeAsyncValidators(this._rawAsyncValidators);\n  }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _setUpControl() {\n    this._checkParentType();\n    this._control = this.formDirective.addControl(this);\n    if (this.control.disabled && this.valueAccessor.setDisabledState) {\n      this.valueAccessor.setDisabledState(true);\n    }\n    this._added = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName]', providers: [controlNameBinding]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formControlName', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlName.ctorParameters;\n/** @type {?} */\nFormControlName.propDecorators;\n/** @type {?} */\nFormControlName.prototype._added;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype.viewModel;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype._control;\n/** @type {?} */\nFormControlName.prototype.name;\n/** @type {?} */\nFormControlName.prototype.model;\n/** @type {?} */\nFormControlName.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}