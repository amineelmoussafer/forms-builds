{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/range_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,SAAE,EAAU,UAAA,EAAsB,QAAA,EAAU,UAAA,EAAW,MAAA,qBAAA;OAEvD,EAAuB,iBAAA,EAAkB,MAAA,0BAAA;AAEhD,OAAO,MAAA,gBAAA,CAAM,oBAAA,GAAiC;IAC5C,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,MAAM,kBAAA,CAAmB;IACjD,KAAK,EAAE,IAAA;CACR,CAAC;AACF;;;;;;;;GAQG;AACH;IAGA;;;OAGG;IACH,YADsB,SAAW,EAAkB,WAAa;QAA1C,cAAA,GAAA,SAAA,CAAW;QAAkB,gBAAA,GAAA,WAAA,CAAa;QAL9D,aAAQ,GAEG,CAAA,CAAI,OAAQ,CAAA,CAAG;QAD1B,cAAS,GAEG,QAAM,CAAA,CAAG;IAEoD,CAAA;IAG3E;;;OAGG;IACH,UALG,CAAA,KAAA;QAMC,IAAI,CALC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,OAAA,EAAS,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC;IAMhG,CAAC;IACH;;;OAGG;IACH,gBARG,CAAA,EAAA;QASC,IAAI,CARC,QAAC,GAAU,CAAA,KAAE,OAAW,EAAA,CAAG,KAAC,IAAQ,EAAA,GAAK,IAAA,GAAO,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC,CAAC,CAAA,CAAE;IAS7E,CAAC;IACH;;;OAGG;IACH,iBAXG,CAAA,EAAA,IAAyC,IAAA,CAAK,SAAC,GAAW,EAAA,CAAG,CAAC,CAAA;IAYjE;;;OAGG;IACH,gBAdG,CAAA,UAAA;QAeC,IAAI,CAdC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,UAAA,EAAY,UAAA,CAAW,CAAC;IAe5F,CAAC;AAkBH,CAAC;AA/BM,6BAAA,GAAoC;IAe3C,EAdE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAevB,QAAQ,EAPR,8FAAA;gBASA,IAAI,EAdE;oBAeJ,UAAU,EAdE,+BAAA;oBAeZ,SAAS,EAdE,+BAAA;oBAeX,QAAQ,EAdE,aAAA;iBAeX;gBACD,SAAS,EAdE,CAAA,oBAAE,CAAoB;aAelC,EAdC,EAAG;CAeJ,CAdC;AAeF,kBAAkB;AAbX,iCAAA,GAAiF,MAAM;IAe9F,EAAC,IAdC,EAAK,QAAA,GAAS;IAehB,EAAC,IAdC,EAAK,UAAA,GAAW;CAejB,CACA;AAED;IACA,gBAAgB;IAChB,kBAAkB,CAAC,UAAU,CAAC;IAC9B;;;OAGG;IACH,kBAAkB,CAAC,cAAc,CAAC;IAClC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACtC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC;IACvC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC;IACvC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,WAAW,CAAC;AACzC,CAAC","file":"range_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Provider, Renderer, forwardRef} from '@angular/core/index';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ RANGE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\nfunction RangeValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeValueAccessor.ctorParameters;\n/** @type {?} */\nRangeValueAccessor.prototype.onChange;\n/** @type {?} */\nRangeValueAccessor.prototype.onTouched;\n/** @type {?} */\nRangeValueAccessor.prototype._renderer;\n/** @type {?} */\nRangeValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}