{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/ng_form.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,EAAA,SAAE,EAAU,MAAA,EAAQ,QAAA,EAAU,IAAA,EAAM,UAAA,EAAW,MAAA,eAAA,CAAA;AAEtD,OAAO,EAAA,YAAE,EAAY,MAAA,iBAAA,CAAA;AACrB,OAAO,EAA+B,SAAA,EAAU,MAAA,UAAA,CAAA;AAChD,OAAO,EAAA,mBAAE,EAAoB,aAAA,EAAc,MAAA,eAAA,CAAA;AAE3C,OAAO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AAKzB,OAAO,EAAA,sBAAE,EAAuB,iBAAA,EAAmB,YAAA,EAAc,kBAAA,EAAmB,MAAA,UAAA,CAAA;AAEpF,MAAM,CAAC,IAAA,gBAAA,CAAM,qBAAA,GAA6B;IACxC,OAAO,EAAE,gBAAA;IACT,WAAW,EAAE,UAAA,CAAW,cAAM,OAAA,MAAA,EAAA,CAAA,CAAO;CACtC,CAAC;AAEF,IAAM,gBAAgB,CAAhB,eAAA,GAAkB,OAAA,CAAQ,OAAC,CAAO,IAAC,CAAI,CAAC;AAC9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IAEC,0BAAA;IAGD;;;OAGG;IACH,gBACS,UADgB,EAEhB,eADqB;QAD9B,YAGI,iBAAO,SAGR;QAZO,gBAAA,GAAsB,KAAA,CAAM;QACpC,cAAQ,GAEG,IAAI,YAAA,EAAa,CAAE;QAO5B,KAAI,CAAC,IAAI;YACL,IAAI,SAAS,CAAC,EAAE,EAAE,iBAAiB,CAAC,UAAU,CAAC,EAAE,sBAAsB,CAAC,eAAe,CAAC,CAAC,CAAC;;IAChG,CAAC;IAIH,sBAHG,6BAAA;QAAH;;WAEG;aACH,cAH6B,MAAA,CAAO,IAAA,CAAK,UAAC,CAAU,CAAC,CAAA;;;OAAA;IAOrD,sBALG,iCAAA;QAEH;;WAEG;aACH,cAL8B,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;;;OAAA;IAS3C,sBAPG,2BAAA;QAIH;;WAEG;aACH,cAP6B,MAAA,CAAO,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA;;;OAAA;IAW/C,sBATG,wBAAA;QAMH;;WAEG;aACH,cATyB,MAAA,CAAO,EAAA,CAAG,CAAC,CAAA;;;OAAA;IAapC,sBAXG,4BAAA;QAQH;;WAEG;aACH,cAXqD,MAAA,CAAO,IAAA,CAAK,IAAC,CAAI,QAAC,CAAQ,CAAC,CAAA;;;OAAA;IAYhF;;;OAGG;IACH,2BAdG,GAcH,UAdG,GAAA;QAcH,iBAOG;QANC,eAAe,CAdC,IAAC,CAAI;YAenB,IAAM,gBAAgB,CAdhB,SAAA,GAAY,KAAA,CAAK,cAAC,CAAc,GAAC,CAAG,IAAC,CAAI,CAAC;YAehD,GAAG,CAdC,QAAC,GAAQ,CAAe,SAAC,CAAS,eAAC,CAAe,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,OAAC,CAAO,CAAA,CAAC;YAe7E,YAAY,CAdC,GAAC,CAAG,OAAC,EAAQ,GAAA,CAAI,CAAC;YAe/B,GAAG,CAdC,OAAC,CAAO,sBAAC,CAAsB,EAAC,SAAC,EAAU,KAAA,EAAM,CAAC,CAAC;QAezD,CAAC,CAdC,CAAC;IAeL,CAAC;IACH;;;OAGG;IACH,2BAjBG,GAiBH,UAjBG,GAAA,IAAuC,MAAA,CAAA,CAAoB,IAAC,CAAI,IAAC,CAAI,GAAC,CAAG,GAAC,CAAG,IAAC,CAAI,CAAA,CAAC,CAAC,CAAA;IAkBvF;;;OAGG;IACH,8BApBG,GAoBH,UApBG,GAAA;QAoBH,iBAOG;QANC,eAAe,CApBC,IAAC,CAAI;YAqBnB,IAAM,gBAAgB,CApBhB,SAAA,GAAY,KAAA,CAAK,cAAC,CAAc,GAAC,CAAG,IAAC,CAAI,CAAC;YAqBhD,EAAE,CAAC,CAAC,SApBC,CAAS,CAAC,CAAA;gBAqBb,SAAS,CApBC,aAAC,CAAa,GAAC,CAAG,IAAC,CAAI,CAAC;YAqBpC,CAAC;QACH,CAAC,CApBC,CAAC;IAqBL,CAAC;IACH;;;OAGG;IACH,6BAvBG,GAuBH,UAvBG,GAAA;QAuBH,iBAQG;QAPC,eAAe,CAvBC,IAAC,CAAI;YAwBnB,IAAM,gBAAgB,CAvBhB,SAAA,GAAY,KAAA,CAAK,cAAC,CAAc,GAAC,CAAG,IAAC,CAAI,CAAC;YAwBhD,IAAM,gBAAgB,CAvBhB,KAAA,GAAQ,IAAI,SAAA,CAAU,EAAC,CAAE,CAAC;YAwBhC,kBAAkB,CAvBC,KAAC,EAAM,GAAA,CAAI,CAAC;YAwB/B,SAAS,CAvBC,eAAC,CAAe,GAAC,CAAG,IAAC,EAAK,KAAA,CAAM,CAAC;YAwB3C,KAAK,CAvBC,sBAAC,CAAsB,EAAC,SAAC,EAAU,KAAA,EAAM,CAAC,CAAC;QAwBnD,CAAC,CAvBC,CAAC;IAwBL,CAAC;IACH;;;OAGG;IACH,gCA1BG,GA0BH,UA1BG,GAAA;QA0BH,iBAOG;QANC,eAAe,CA1BC,IAAC,CAAI;YA2BnB,IAAM,gBAAgB,CA1BhB,SAAA,GAAY,KAAA,CAAK,cAAC,CAAc,GAAC,CAAG,IAAC,CAAI,CAAC;YA2BhD,EAAE,CAAC,CAAC,SA1BC,CAAS,CAAC,CAAA;gBA2Bb,SAAS,CA1BC,aAAC,CAAa,GAAC,CAAG,IAAC,CAAI,CAAC;YA2BpC,CAAC;QACH,CAAC,CA1BC,CAAC;IA2BL,CAAC;IACH;;;OAGG;IACH,6BA7BG,GA6BH,UA7BG,GAAA,IAA4C,MAAA,CAAA,CAAkB,IAAC,CAAI,IAAC,CAAI,GAAC,CAAG,GAAC,CAAG,IAAC,CAAI,CAAA,CAAC,CAAC,CAAA;IA8B1F;;;;OAIG;IACH,4BAjCG,GAiCH,UAjCG,GAAA,EAAA,KAAA;QAiCH,iBAKG;QAJC,eAAe,CAjCC,IAAC,CAAI;YAkCnB,IAAM,gBAAgB,CAjChB,IAAA,GAAK,CAAe,KAAC,CAAI,IAAC,CAAI,GAAC,CAAG,GAAC,CAAG,IAAC,CAAI,CAAA,CAAC;YAkClD,IAAI,CAjCC,QAAC,CAAQ,KAAC,CAAK,CAAC;QAkCvB,CAAC,CAjCC,CAAC;IAkCL,CAAC;IACH;;;OAGG;IACH,yBApCG,GAoCH,UApCG,KAAA,IAA6C,IAAA,CAAK,OAAC,CAAO,QAAC,CAAQ,KAAC,CAAK,CAAC,CAAC,CAAA;IAqC9E;;;OAGG;IACH,yBAvCG,GAuCH,UAvCG,MAAA;QAwCC,IAAI,CAvCC,UAAC,GAAY,IAAA,CAAK;QAwCvB,IAAI,CAvCC,QAAC,CAAQ,IAAC,CAAI,MAAC,CAAM,CAAC;QAwC3B,MAAM,CAvCC,KAAA,CAAM;IAwCf,CAAC;IACH;;OAEG;IACH,wBAzCG,GAyCH,cAzCoB,IAAA,CAAK,SAAC,EAAS,CAAE,CAAC,CAAA;IA0CtC;;;OAGG;IACH,0BA5CG,GA4CH,UA5CG,KAAA;QAAA,sBAAA,EAAA,iBAAA;QA6CC,IAAI,CA5CC,IAAC,CAAI,KAAC,CAAK,KAAC,CAAK,CAAC;QA6CvB,IAAI,CA5CC,UAAC,GAAY,KAAA,CAAM;IA6C1B,CAAC;IACH;;;;OAIG;IACH,+BA/CG,GA+CH,UA/CG,IAAA;QAgDC,IAAI,CA/CC,GAAC,EAAG,CAAE;QAgDX,MAAM,CA/CC,IAAA,CAAK,MAAC,GAAM,CAAa,IAAC,CAAI,IAAC,CAAI,GAAC,CAAG,IAAC,CAAI,CAAA,GAAG,IAAA,CAAK,IAAC,CAAI;IAgDlE,CAAC;IAeH,aAAC;AAAD,CA3JA,AA2JC,CAzJA,gBAAA;;AA4FM,iBAAA,GAAoC;IAgD3C,EA/CE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAgDvB,QAAQ,EA/CE,uDAAA;gBAgDV,SAAS,EA/CE,CAAA,qBAAE,CAAqB;gBAgDlC,IAAI,EA/CE,EAAA,UAAE,EAAW,kBAAA,EAAoB,SAAA,EAAW,WAAA,EAAY;gBAgD9D,OAAO,EA/CE,CAAA,UAAE,CAAU;gBAgDrB,QAAQ,EA/CE,QAAA;aAgDX,EA/CC,EAAG;CAgDJ,CA/CC;AAgDF,kBAAkB;AA9CX,qBAAA,GAAiF,cAAM,OAAA;IAgD9F,EAAC,IA/CC,EAAK,KAAA,EAAO,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,QAAA,EAAS,EAAG,EAAE,IAAA,EAAM,IAAA,EAAK,EAAG,EAAE,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,aAAE,EAAa,EAAG,EAAE,EAAG;IAgD5G,EAAC,IA/CC,EAAK,KAAA,EAAO,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,QAAA,EAAS,EAAG,EAAE,IAAA,EAAM,IAAA,EAAK,EAAG,EAAE,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,mBAAE,EAAmB,EAAG,EAAE,EAAG;CAgDjH,EAlD6F,CAkD7F,CA/CC;AAkDF;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC;IAC5B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC1B,CAAC","file":"ng_form.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Optional, Self, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../facade/async';\nimport {AbstractControl, FormControl, FormGroup} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from './shared';\n\nexport const /** @type {?} */ formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst /** @type {?} */ resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n * \n * \\@howToUse \n * \n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n * \n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n * \n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n * \n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgForm extends ControlContainer implements Form {\nprivate _submitted: boolean = false;\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n/**\n * @return {?}\n */\nget submitted(): boolean { return this._submitted; }\n/**\n * @return {?}\n */\nget formDirective(): Form { return this; }\n/**\n * @return {?}\n */\nget control(): FormGroup { return this.form; }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      dir._control = /** @type {?} */(( <FormControl>container.registerControl(dir.name, dir.control)));\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: NgModel): FormControl { return /** @type {?} */(( <FormControl>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      const /** @type {?} */ group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormGroup(dir: NgModelGroup): FormGroup { return /** @type {?} */(( <FormGroup>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ ctrl = /** @type {?} */(( <FormControl>this.form.get(dir.path)));\n      ctrl.setValue(value);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nsetValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n/**\n * @return {?}\n */\nonReset(): void { this.resetForm(); }\n/**\n * @param {?=} value\n * @return {?}\n */\nresetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n/**\n * \\@internal\n * @param {?} path\n * @return {?}\n */\n_findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? /** @type {?} */(( <FormGroup>this.form.get(path))) : this.form;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\nfunction NgForm_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForm.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForm.ctorParameters;\n/** @type {?} */\nNgForm.prototype._submitted;\n/** @type {?} */\nNgForm.prototype.form;\n/** @type {?} */\nNgForm.prototype.ngSubmit;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}