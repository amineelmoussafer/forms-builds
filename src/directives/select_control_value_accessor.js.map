{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/select_control_value_accessor.ts"],"names":[],"mappings":"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","file":"select_control_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer, forwardRef} from '@angular/core/index';\n\nimport {isPrimitive, looseIdentical} from '../facade/lang';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ SELECT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (!isPrimitive(value)) value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use select controls with form directives\n * \n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n * \n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n * \n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n * \n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n * \n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n * \n * ### Caveat: Option selection\n * \n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n * \n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n * \n * #### Syntax\n * \n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n * \n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n * \n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\nprivate _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.value = value;\n    const /** @type {?} */ id: string = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const /** @type {?} */ valueString = _buildValueString(id, value);\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = valueString;\n      fn(this._getOptionValue(valueString));\n    };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_registerOption(): string { return (this._idCounter++).toString(); }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_getOptionId(value: any): string {\n    for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} valueString\n * @return {?}\n */\n_getOptionValue(valueString: string): any {\n    const /** @type {?} */ id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'compareWith': [{ type: Input },],\n};\n}\n\nfunction SelectControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectControlValueAccessor.ctorParameters;\n/** @type {?} */\nSelectControlValueAccessor.propDecorators;\n/** @type {?} */\nSelectControlValueAccessor.prototype.value;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._optionMap;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._idCounter;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onChange;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nSelectControlValueAccessor.prototype._compareWith;\n/** @type {?} */\nSelectControlValueAccessor.prototype._renderer;\n/** @type {?} */\nSelectControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n * \n * \\@howToUse \n * \n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n * \n * \\@stable\n */\nexport class NgSelectOption implements OnDestroy {\n  id: string;\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _select\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\nprivate _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_setElementValue(value: string): void {\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\nfunction NgSelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSelectOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSelectOption.ctorParameters;\n/** @type {?} */\nNgSelectOption.propDecorators;\n/** @type {?} */\nNgSelectOption.prototype.id;\n/** @type {?} */\nNgSelectOption.prototype._element;\n/** @type {?} */\nNgSelectOption.prototype._renderer;\n/** @type {?} */\nNgSelectOption.prototype._select;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}