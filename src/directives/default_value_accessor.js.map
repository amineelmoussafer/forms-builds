{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/default_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,SAAE,EAAU,UAAA,EAAY,QAAA,EAAU,UAAA,EAAW,MAAA,qBAAA;OAE7C,EAAuB,iBAAA,EAAkB,MAAA,0BAAA;AAEhD,OAAO,MAAA,gBAAA,CAAM,sBAAA,GAA8B;IACzC,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,MAAM,oBAAA,CAAqB;IACnD,KAAK,EAAE,IAAA;CACR,CAAC;AACF;;;;;;;;;;GAUG;AACH;IAGA;;;OAGG;IACH,YADsB,SAAW,EAAkB,WAAa;QAA1C,cAAA,GAAA,SAAA,CAAW;QAAkB,gBAAA,GAAA,WAAA,CAAa;QAL9D,aAAQ,GAEG,CAAA,CAAI,OAAQ,CAAA,CAAG;QAD1B,cAAS,GAEG,QAAM,CAAA,CAAG;IAEoD,CAAA;IAG3E;;;OAGG;IACH,UALG,CAAA,KAAA;QAMC,MAAM,gBAAgB,CALhB,eAAA,GAAkB,KAAA,IAAS,IAAA,GAAO,EAAA,GAAK,KAAA,CAAM;QAMnD,IAAI,CALC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,OAAA,EAAS,eAAA,CAAgB,CAAC;IAM9F,CAAC;IACH;;;OAGG;IACH,gBARG,CAAA,EAAA,IAA8C,IAAA,CAAK,QAAC,GAAU,EAAA,CAAG,CAAC,CAAA;IASrE;;;OAGG;IACH,iBAZG,CAAA,EAAA,IAAyC,IAAA,CAAK,SAAC,GAAW,EAAA,CAAG,CAAC,CAAA;IAajE;;;OAGG;IACH,gBAfG,CAAA,UAAA;QAgBC,IAAI,CAfC,SAAC,CAAS,kBAAC,CAAkB,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,UAAA,EAAY,UAAA,CAAW,CAAC;IAgB5F,CAAC;AAiBH,CAAC;AA/BM,+BAAA,GAAoC;IAgB3C,EAfE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAgBvB,QAAQ,EACJ,8MAA8M;gBAClN,sEAAsE;gBACtE,gEAAgE;gBAChE,qDAAqD;gBACrD,IAAI,EAfE,EAAA,SAAE,EAAU,+BAAA,EAAiC,QAAA,EAAU,aAAA,EAAc;gBAgB3E,SAAS,EAfE,CAAA,sBAAE,CAAsB;aAgBpC,EAfC,EAAG;CAgBJ,CAfC;AAgBF,kBAAkB;AAdX,mCAAA,GAAiF,MAAM;IAgB9F,EAAC,IAfC,EAAK,QAAA,GAAS;IAgBhB,EAAC,IAfC,EAAK,UAAA,GAAW;CAgBjB,CACA;AAED;IACA,gBAAgB;IAChB,oBAAoB,CAAC,UAAU,CAAC;IAChC;;;OAGG;IACH,oBAAoB,CAAC,cAAc,CAAC;IACpC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACxC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;IACzC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;IACzC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,WAAW,CAAC;AAC3C,CAAC","file":"default_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer, forwardRef} from '@angular/core/index';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n * \n *  \\@stable\n */\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngControl],[ngModel],[ngFormControl]',\n  host: {'(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [DEFAULT_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\nfunction DefaultValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDefaultValueAccessor.ctorParameters;\n/** @type {?} */\nDefaultValueAccessor.prototype.onChange;\n/** @type {?} */\nDefaultValueAccessor.prototype.onTouched;\n/** @type {?} */\nDefaultValueAccessor.prototype._renderer;\n/** @type {?} */\nDefaultValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}