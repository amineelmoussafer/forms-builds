{"version":3,"sources":["../../../../../modules/@angular/forms/src/directives/radio_control_value_accessor.ts"],"names":[],"mappings":"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","file":"radio_control_value_accessor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer, forwardRef} from '@angular/core/index';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const /** @type {?} */ RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nexport class RadioControlRegistry {\nprivate _accessors: any[] = [];\n/**\n * @param {?} control\n * @param {?} accessor\n * @return {?}\n */\nadd(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nremove(accessor: RadioControlValueAccessor) {\n    for (let /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nselect(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n/**\n * @param {?} controlPair\n * @param {?} accessor\n * @return {?}\n */\nprivate _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioControlRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlRegistry.ctorParameters;\n/** @type {?} */\nRadioControlRegistry.prototype._accessors;\n}\n\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use radio buttons with form directives\n * \n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n * \n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n * \n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n * \n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  \\@stable\n */\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n  /** @internal */\n  _state: boolean;\n  /** @internal */\n  _control: NgControl;\n  /** @internal */\n  _fn: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n   name: string;\n   formControlName: string;\n   value: any;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _registry\n * @param {?} _injector\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _registry: RadioControlRegistry,\nprivate _injector: Injector) {}\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._registry.remove(this); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nfireUncheck(value: any): void { this.writeValue(value); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * @return {?}\n */\nprivate _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n/**\n * @return {?}\n */\nprivate _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: RadioControlRegistry, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'formControlName': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction RadioControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlValueAccessor.ctorParameters;\n/** @type {?} */\nRadioControlValueAccessor.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._state;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._fn;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onChange;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nRadioControlValueAccessor.prototype.name;\n/** @type {?} */\nRadioControlValueAccessor.prototype.formControlName;\n/** @type {?} */\nRadioControlValueAccessor.prototype.value;\n/** @type {?} */\nRadioControlValueAccessor.prototype._renderer;\n/** @type {?} */\nRadioControlValueAccessor.prototype._elementRef;\n/** @type {?} */\nRadioControlValueAccessor.prototype._registry;\n/** @type {?} */\nRadioControlValueAccessor.prototype._injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}