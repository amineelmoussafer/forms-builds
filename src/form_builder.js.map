{"version":3,"sources":["../../../../modules/@angular/forms/src/form_builder.ts"],"names":[],"mappings":"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","file":"form_builder.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {isPresent} from './facade/lang';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n * \n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n * \n * \\@howToUse \n * \n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n * \n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  * **NgModule**: {\\@link ReactiveFormsModule}\n * \n * \\@stable\n */\nexport class FormBuilder {\n/**\n * Construct a new {\\@link FormGroup} with the given map of configuration.\n * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n * \n * See the {\\@link FormGroup} constructor for more details.\n * @param {?} controlsConfig\n * @param {?=} extra\n * @return {?}\n */\ngroup(controlsConfig: {[key: string]: any}, extra: {[key: string]: any} = null): FormGroup {\n    const /** @type {?} */ controls = this._reduceControls(controlsConfig);\n    const /** @type {?} */ validator: ValidatorFn = isPresent(extra) ? extra['validator'] : null;\n    const /** @type {?} */ asyncValidator: AsyncValidatorFn = isPresent(extra) ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n/**\n * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n * `asyncValidator`.\n * \n * `formState` can either be a standalone value for the form control or an object\n * that contains both a value and a disabled status.\n * \n * @param {?} formState\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\ncontrol(\n      formState: Object, validator: ValidatorFn|ValidatorFn[] = null,\n      asyncValidator: AsyncValidatorFn|AsyncValidatorFn[] = null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n/**\n * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n * configuration, with the given optional `validator` and `asyncValidator`.\n * @param {?} controlsConfig\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\narray(\n      controlsConfig: any[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null): FormArray {\n    const /** @type {?} */ controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n/**\n * \\@internal\n * @param {?} controlsConfig\n * @return {?}\n */\n_reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const /** @type {?} */ controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n/**\n * \\@internal\n * @param {?} controlConfig\n * @return {?}\n */\n_createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const /** @type {?} */ value = controlConfig[0];\n      const /** @type {?} */ validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const /** @type {?} */ asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nFormBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormBuilder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}